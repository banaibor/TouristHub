@page "/register"

@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Register> Logger

<PageTitle>Register</PageTitle>

<h3>User Registration</h3>
<p class="text-muted">Create your TouristHub account to start exploring!</p>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="mb-3">
        <label for="username" class="form-label">Username *</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" placeholder="Enter your username" />
        <ValidationMessage For="@(() => registerModel.Username)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email Address *</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Enter your email address" />
        <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password *</label>
        <InputText type="password" @bind-Value="registerModel.Password" class="form-control" id="password" placeholder="Enter a secure password" />
        <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
        <div class="form-text">Password must be at least 6 characters long.</div>
    </div>
    <button type="submit" class="btn btn-success w-100" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <span>Creating Account...</span>
        }
        else
        {
            <span>Create Account</span>
        }
    </button>
</EditForm>

<div class="mt-3 text-center">
    <p>Already have an account? <button type="button" class="btn btn-link p-0" @onclick="NavigateToLogin">Click here to login</button></p>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">
        <strong>@(isSuccess ? "Success!" : "Error!")</strong> @message
    </div>
}

@if (!string.IsNullOrEmpty(debugInfo) && !isSuccess)
{
    <div class="alert alert-secondary mt-3">
        <small>Debug Info: @debugInfo</small>
    </div>
}

@code {
    private RegisterModel registerModel = new RegisterModel { Role = "USER" }; // Default to USER role
    private string message = string.Empty;
    private string debugInfo = string.Empty;
    private bool isLoading = false;
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        try
        {
            // Show the base URL for debugging
            debugInfo = $"API Base URL: {Http?.BaseAddress?.ToString() ?? "Not available"} | Registering as: USER";
            Logger?.LogInformation($"Register component initialized with base URL: {Http?.BaseAddress}");
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error initializing Register component");
            debugInfo = $"Initialization error: {ex.Message}";
        }
    }

    private void NavigateToLogin()
    {
        try
        {
            Navigation?.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error navigating to login page");
            message = "Navigation error occurred";
        }
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        message = string.Empty;
        isSuccess = false;
        
        try
        {
            Logger?.LogInformation($"Attempting registration for user: {registerModel.Email} with role: {registerModel.Role}");
            Logger?.LogInformation($"Using API base URL: {Http?.BaseAddress}");
            
            var response = await Http.PostAsJsonAsync("/api/Account/register", registerModel);
            Logger?.LogInformation($"Registration response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                message = "Registration successful! You can now login with your credentials.";
                isSuccess = true;
                Logger?.LogInformation($"Registration successful for user: {registerModel.Email}");
                
                // Clear the form
                registerModel = new RegisterModel { Role = "USER" };
                
                // Navigate to login after a delay
                await Task.Delay(2000);
                try
                {
                    Navigation?.NavigateTo("/login", replace: true);
                }
                catch (Exception navEx)
                {
                    Logger?.LogError(navEx, "Error during post-registration navigation");
                    message = "Registration successful but navigation failed. Please use the login link above.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Registration failed: {error}";
                Logger?.LogWarning($"Registration failed with status {response.StatusCode}: {error}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            message = $"Network Error: {httpEx.Message}";
            Logger?.LogError(httpEx, $"Network error during registration: {httpEx.Message}");
            debugInfo = $"Network Exception: {httpEx.Message}. API URL: {Http?.BaseAddress}";
        }
        catch (TaskCanceledException tcEx) when (tcEx.InnerException is TimeoutException)
        {
            message = "Request timeout - please check your connection";
            Logger?.LogError(tcEx, "Registration request timed out");
        }
        catch (Exception ex)
        {
            message = $"Exception: {ex.Message}";
            Logger?.LogError(ex, $"Unexpected error during registration: {ex.Message}");
            debugInfo = $"Exception Type: {ex.GetType().Name}, Message: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        public string Role { get; set; } = "USER"; // Default to USER role
    }
}
