@page "/login"

@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations

@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Login> Logger

<PageTitle>TouristHub - Login</PageTitle>

<div class="text-center mb-4">
    <h2>Welcome to TouristHub</h2>
    <p class="text-muted">Your ultimate tourist guide companion</p>
</div>

<h3>Login to Your Account</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="mb-3">
        <label for="email" class="form-label">Email Address *</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email address" />
        <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password *</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
    </div>
    <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <span>Signing In...</span>
        }
        else
        {
            <span>Sign In</span>
        }
    </button>
</EditForm>

<div class="mt-4 text-center">
    <p class="mb-2">Don't have an account?</p>
    <button type="button" class="btn btn-outline-success" @onclick="NavigateToRegister">Create New Account</button>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(message.Contains("successful") ? "alert-success" : "alert-danger") mt-3">
        <strong>@(message.Contains("successful") ? "Success!" : "Error!")</strong> @message
    </div>
}

@if (!string.IsNullOrEmpty(debugInfo) && (string.IsNullOrEmpty(message) || !message.Contains("successful")))
{
    <div class="alert alert-secondary mt-3">
        <small>Debug Info: @debugInfo</small>
    </div>
}

@code {
    private LoginModel loginModel = new();
    private string message = string.Empty;
    private string debugInfo = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        try
        {
            // Show the base URL for debugging
            debugInfo = $"API Base URL: {Http?.BaseAddress?.ToString() ?? "Not available"}";
            Logger?.LogInformation($"Login component initialized with base URL: {Http?.BaseAddress}");
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error initializing Login component");
            debugInfo = $"Initialization error: {ex.Message}";
        }
    }

    private void NavigateToRegister()
    {
        try
        {
            Navigation?.NavigateTo("/register");
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Error navigating to register page");
            message = "Navigation error occurred";
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        message = string.Empty;
        
        try
        {
            Logger?.LogInformation($"Attempting login for user: {loginModel.Email}");
            Logger?.LogInformation($"Using API base URL: {Http?.BaseAddress}");
            
            var response = await Http.PostAsJsonAsync("/api/Account/login", loginModel);
            Logger?.LogInformation($"Login response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                message = "Login successful! Redirecting...";
                Logger?.LogInformation($"Login successful for user: {loginModel.Email}");
                
                // Small delay to show success message
                await Task.Delay(1000);
                
                try
                {
                    if (result is not null)
                    {
                        switch (result.Role?.ToUpperInvariant())
                        {
                            case "ADMIN":
                                Navigation?.NavigateTo("/admin/dashboards/dashboard", replace: true);
                                break;
                            case "MANAGER":
                                Navigation?.NavigateTo("/manager/dashboards/dashboard", replace: true);
                                break;
                            default:
                                Navigation?.NavigateTo("/user/dashboards/dashboard", replace: true);
                                break;
                        }
                    }
                    else
                    {
                        // Fallback navigation if result is null
                        Navigation?.NavigateTo("/user/dashboards/dashboard", replace: true);
                    }
                }
                catch (Exception navEx)
                {
                    Logger?.LogError(navEx, "Error during post-login navigation");
                    message = "Login successful but navigation failed. Please try refreshing the page.";
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Login failed: {error}";
                Logger?.LogWarning($"Login failed with status {response.StatusCode}: {error}");
            }
        }
        catch (HttpRequestException httpEx)
        {
            message = $"Network Error: {httpEx.Message}";
            Logger?.LogError(httpEx, $"Network error during login: {httpEx.Message}");
            debugInfo = $"Network Exception: {httpEx.Message}. API URL: {Http?.BaseAddress}";
        }
        catch (TaskCanceledException tcEx) when (tcEx.InnerException is TimeoutException)
        {
            message = "Request timeout - please check your connection";
            Logger?.LogError(tcEx, "Login request timed out");
        }
        catch (Exception ex)
        {
            message = $"Exception: {ex.Message}";
            Logger?.LogError(ex, $"Unexpected error during login: {ex.Message}");
            debugInfo = $"Exception Type: {ex.GetType().Name}, Message: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResult
    {
        public string? Message { get; set; }
        public string? Role { get; set; }
    }
}
